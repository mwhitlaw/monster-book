{"version":3,"sources":["components/card/card.component.js","components/card-list/card-list.component.js","components/search-box/search-box.component.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","console","log","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","sortByName","sf","state","currentSort","workingCopy","sort","a","b","setState","searchText","fetch","then","response","json","this","filteredMonsters","filter","m","toLowerCase","includes","onClick","event","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qVAIaA,G,kBAAO,SAACC,GACnB,OACE,yBAAKC,UAAU,kBACb,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,4BAAKL,EAAMI,QAAQE,MACnB,2BAAIN,EAAMI,QAAQG,UCLXC,EAAW,SAACR,GAErB,OADAS,QAAQC,IAAIV,GAER,yBAAKC,UAAU,aACVD,EAAMW,SAASC,KAAI,SAAAR,GAAO,OAAI,kBAAC,EAAD,CAAMS,IAAKT,EAAQC,GAAID,QAASA,SCL9DU,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACtC,OACE,2BACEf,UAAU,SACVgB,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC6CDG,E,YA9Cb,aAAe,IAAD,8BACZ,+CAcFC,WAAa,WACX,IAAMC,EAAgC,IAA3B,EAAKC,MAAMC,YAAoB,EAA+B,IAA3B,EAAKD,MAAMC,aAAqB,EAAI,EAC5EC,EAAW,YAAO,EAAKF,MAAMX,UAExB,IAAPU,EACFG,EAAYC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAErB,GAAKsB,EAAEtB,GAAK,EAAIqB,EAAErB,GAAKsB,EAAEtB,IAAM,EAAI,KAEhEmB,EAAYC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEpB,KAAOqB,EAAErB,KAAO,EAAIe,EAAKK,EAAEpB,KAAOqB,EAAErB,MAAQ,EAAIe,EAAK,KAEpF,EAAKO,SAAS,CAACjB,SAAUa,EAAaD,YAAaF,KAtBnD,EAAKC,MAAQ,CACXX,SAAU,GACVY,YAAa,EACbM,WAAY,IALF,E,iFASO,IAAD,OAClBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAI,EAAKL,SAAS,CAACjB,SAAS,YAAKsB,U,+BAenC,IAAD,SACwBC,KAAKZ,MAA7BX,EADA,EACAA,SAAUkB,EADV,EACUA,WACXM,EAAmBxB,EAASyB,QAAO,SAAAC,GAAC,OAAIA,EAAE/B,KAAKgC,cAAcC,SAASV,EAAWS,kBACvF,OACE,yBAAKrC,UAAU,OACb,4CACA,2BAAG,4BAAQuC,QAASN,KAAKd,YAAtB,OAAkE,IAA3Bc,KAAKZ,MAAMC,YAAoB,GAAgC,IAA3BW,KAAKZ,MAAMC,YAAoB,IAAM,MACnH,2BACE,kBAAC,EAAD,CACER,YAAY,kBACZC,aAAc,SAAAyB,GAAK,OAAI,EAAKb,SAAS,CAACC,WAAYY,EAAMC,OAAOC,YAGnE,kBAAC,EAAD,CAAUhC,SAAUwB,S,GA1CVS,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.16b7a0c2.chunk.js","sourcesContent":["import React from 'react'\nimport './card.styles.css'\n\n\nexport const Card = (props) => {\n  return (\n    <div className='card-container'>\n      <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\n      <h2>{props.monster.name}</h2>\n      <p>{props.monster.email}</p>\n    </div>\n  )\n}\n","import React from 'react'\nimport './card-list.styles.css'\nimport {Card} from '../card/card.component'\n\nexport const CardList = (props) => {\n    console.log(props)\n    return (\n        <div className='card-list'>\n            {props.monsters.map(monster => <Card key={monster.id} monster={monster}/>)}\n        </div>\n    )\n}\n","import React from 'react'\nimport './search-box.styles.css'\n\nexport const SearchBox = ({placeholder, handleChange}) => {\n  return (\n    <input \n      className='search'\n      type='search' \n      placeholder={placeholder} \n      onChange={handleChange} \n    />\n  )\n}\n","import React, {Component} from 'react';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component'\nimport {SearchBox} from './components/search-box/search-box.component'\n\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      monsters: [],\n      currentSort: 0,\n      searchText: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(json => this.setState({monsters: [...json]}))\n  }\n\n  sortByName = () => {\n    const sf = this.state.currentSort === 0 ? 1 : this.state.currentSort === 1 ? -1 : 0\n    const workingCopy = [...this.state.monsters]\n    // workingCopy.sort((a, b) => a.name > b.name ? 1 : a.name < b.name ? -1 : 0)\n    if (sf === 0) {\n      workingCopy.sort((a, b) => a.id > b.id ? 1 : a.id < b.id ? -1 : 0)\n    } else {\n      workingCopy.sort((a, b) => a.name > b.name ? 1 * sf : a.name < b.name ? -1 * sf : 0)\n    }\n    this.setState({monsters: workingCopy, currentSort: sf})\n  }\n\n  render() {\n    const {monsters, searchText} = this.state\n    const filteredMonsters = monsters.filter(m => m.name.toLowerCase().includes(searchText.toLowerCase()))\n    return (\n      <div className=\"App\">\n        <h1>Monster Book</h1>\n        <p><button onClick={this.sortByName}>Sort{this.state.currentSort === 0 ? '' : this.state.currentSort === 1 ? '+' : '-'}</button></p>\n        <p>\n          <SearchBox \n            placeholder='Search Monsters'\n            handleChange={event => this.setState({searchText: event.target.value})}\n          />\n        </p>\n        <CardList monsters={filteredMonsters}/>        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}